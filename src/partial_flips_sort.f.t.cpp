#include <gtest/gtest.h>

#include <partial_flips_sort.hpp>
#include <partial_flip.hpp>

#include <algorithm>
#include <iostream>
#include <vector>

namespace SWQuiz {

    static const std::vector<unsigned int> TEST_DATA[] = {
        { 1, 2, 3, 4, 5 },
        { 1 },
        { 1, 2 },
        { 2, 1 },
        { 1, 2, 3 },
        { 1, 3, 2 },
        { 2, 1, 3 },
        { 2, 3, 1 },
        { 3, 1, 2 },
        { 3, 2, 1 },
        { 4, 2, 1, 3 },
        { 2, 1, 3, 4 },
        { 4, 3, 2, 1 },
        { 5, 1, 10, 8, 3, 4, 7, 2, 6, 9 },
        { 6, 7, 2, 4, 5, 8, 1, 10, 3, 9 },
        { 5, 6, 7, 4, 8, 10, 1, 9, 2, 3 },
        { 5, 6, 7, 4, 8, 10, 1, 9, 2, 3 },
        { 
            80, 39, 50, 11, 83, 20, 35, 93, 74, 17, 37, 36, 97, 28, 1, 73, 13, 2, 26, 43, 19, 85, 10, 48, 94, 
            68, 5, 27, 9, 77, 18, 67, 52, 71, 30, 100, 66, 29, 75, 34, 33, 25, 58, 98, 38, 23, 72, 4, 16, 88, 
            47, 45, 91, 92, 53, 96, 44, 55, 99, 22, 56, 62, 24, 81, 41, 7, 21, 90, 32, 89, 12, 64, 65, 31, 78,
            6, 84, 76, 54, 15, 42, 60, 40, 57, 3, 46, 49, 69, 8, 61, 82, 63, 70, 51, 95, 86, 79, 59, 14, 87 
        },
        {
            13, 31, 68, 89, 99, 97, 57, 87, 25, 17, 38, 70, 72, 46, 77, 49, 6, 86, 19, 74, 98, 54, 50, 40, 21,
            33, 27, 28, 48, 4, 51, 11, 1, 59, 20, 35, 82, 8, 83, 52, 26, 69, 32, 75, 22, 73, 60, 15, 56, 9, 
            29, 92, 93, 30, 36, 88, 45, 3, 63, 81, 65, 61, 76, 85, 5, 90, 2, 53, 55, 91, 67, 71, 95, 41, 34,
            64, 100, 10, 62, 24, 16, 58, 37, 43, 80, 47, 39, 94, 23, 66, 96, 79, 12, 18, 42, 44, 14, 78, 84, 7
        },
        {
            25, 37, 59, 41, 67, 93, 39, 18, 82, 72, 63, 15, 5, 44, 53, 54, 74, 96, 60, 19, 57, 81, 22, 34, 83,
            27, 69, 79, 3, 10, 29, 6, 9, 80, 85, 14, 73, 47, 64, 51, 55, 21, 88, 98, 2, 38, 35, 52, 36, 75, 48,
            97, 50, 43, 31, 66, 26, 71, 77, 7, 62, 33, 12, 68, 94, 28, 13, 46, 99, 17, 40, 78, 89, 8, 65, 4, 70,
            90, 23, 1, 87, 86, 16, 30, 92, 84, 49, 61, 20, 58, 91, 45, 24, 32, 76, 95, 56, 42, 11, 100
        },
        {
            500, 364, 176, 33, 313, 287, 421, 495, 163, 169, 65, 190, 115, 443, 271, 210, 365, 188, 471, 371, 
            80, 398, 63, 352, 481, 381, 320, 52, 472, 10, 127, 179, 28, 312, 51, 11, 215, 118, 262, 446, 478, 
            484, 342, 114, 447, 264, 277, 123, 197, 237, 70, 194, 360, 385, 173, 116, 423, 291, 300, 422, 79, 
            214, 186, 341, 334, 223, 213, 293, 206, 132, 314, 373, 370, 498, 263, 379, 203, 120, 270, 244, 392,
            466,  8, 43, 240, 391, 83, 410, 386, 85, 453, 183, 272, 250, 325, 406, 228, 38, 425, 294, 292, 464,
            208, 349, 131, 192, 109, 310, 139, 89, 251, 107, 189, 448, 298, 19, 230,  9, 488, 302, 299, 175, 
            50, 253, 330, 220, 261, 200, 29, 119, 157, 78, 13, 324, 280, 204, 308, 77, 273, 477, 239, 56, 387, 
            15, 468, 331, 158, 93, 459, 241, 195, 479, 170, 49, 247, 380, 18, 469, 338, 88, 442, 150, 48, 113,
            198, 356, 389, 288, 136, 282, 475, 336, 473, 81, 376, 226, 92,  5, 281, 125, 47, 355, 427, 12, 476,
            102, 14, 178, 402, 142, 164, 267, 24, 199, 286, 322, 137, 390, 243, 45, 133, 333, 347, 209, 275,
            397, 437, 148, 377, 382, 339, 295, 285, 100, 135, 492, 317, 303, 428, 232,  3, 37, 319, 276, 151,
            401, 153, 167, 58, 405, 357, 191, 445, 254, 245, 296, 82, 434, 279, 155, 76, 311, 321, 60, 122, 
            346, 415, 374, 329, 462, 221, 96, 452, 138, 327, 418, 306, 196, 256, 369, 236, 201, 368, 26, 87,
            483,  6, 440, 181, 441, 455, 180, 315, 95, 97, 42, 304, 458, 174, 403, 23, 69, 205, 394, 438, 284,
            457,  2, 185, 108, 436, 141, 407, 129, 258, 461, 480, 354, 307, 61, 144, 417, 112, 36, 396, 309,
            233, 460, 384, 224, 235, 68, 229, 143, 165, 269, 326, 260, 255, 177, 35, 424, 366, 411, 105, 431,
            20, 218, 207, 54, 57, 359, 494, 31, 202, 124, 265, 162, 146,  4, 383, 72, 231, 378, 39, 350, 166,
            21, 451, 94, 399, 27, 71, 126, 193, 297, 227, 225, 212, 450, 110, 234, 242, 465, 490, 367, 491,
            301, 30, 111, 439, 432, 353, 416, 74, 217, 90, 289, 497, 400, 62, 219, 413, 361, 485, 328, 404,
            32, 467, 161, 59, 16, 128, 121, 496, 463, 412, 117, 187, 340, 388, 305, 345, 216, 134, 156, 171,
            172, 248, 435, 363, 414, 318, 499, 489, 101, 337, 449, 86, 84, 290, 147,  7, 433, 34, 266, 348,
            470, 40, 66, 372, 408, 274, 249, 106, 393, 55, 323, 159, 64, 73, 46, 130, 362, 268, 17, 426, 454,
            332, 474, 486, 316, 41, 211, 456, 257, 419, 429, 98, 487, 343, 22, 145, 25, 493, 67, 344, 259, 351,
            1, 409, 182, 152, 375, 53, 104, 222, 395, 154, 420, 75, 358, 103, 184, 252, 444, 140, 246, 91, 238,
            160, 278, 430, 99, 149, 168, 283, 44, 335, 482 
        }
    };

    bool is_valid_sort(const std::vector<unsigned int>& values) {
        for (unsigned int i = 1; i <= values.size(); ++i) {
            const auto it = std::find(begin(values), end(values), i);
            if (it == end(values)) {
                return false;
            }
        }

        return true;
    }

    template <typename T>
    bool is_same_array(
        const std::vector<T>& l,
        const std::vector<T>& r
    ) {
        return l.size() == r.size() && std::equal(begin(l), end(l), begin(r));
    }

    bool can_reconstruct_to_original(
        const std::vector<unsigned int>& expected,
        std::vector<unsigned int>&& result,
        const std::vector<size_t>& k_values
    ) {
        std::vector<unsigned int> to_unsort = result;

        for (auto it = k_values.rbegin(); it != k_values.rend(); ++it) {
            partial_flip(to_unsort, *it);
        }

        return is_same_array(expected, to_unsort);
    }

    TEST(partial_flips_sort_test, stress_test) {
        
        size_t i = 0;
        for (const auto& values : TEST_DATA) {
            std::cout << "Running test #" << i << std::endl;

            std::vector<unsigned int> to_sort = values;
            std::vector<size_t> k_values;
            partial_flips_sort(to_sort, k_values);

            EXPECT_TRUE(is_valid_sort(to_sort));
            EXPECT_TRUE(k_values.size() <= 10 * to_sort.size());
            EXPECT_TRUE(can_reconstruct_to_original(values, std::move(to_sort), k_values));

            ++i;
        }
    }
}